package ua.com.goit.gojava.kickstarter;

import org.junit.Test;

public class KickstarterTest {

	@Test // теперь самое интересное. Как протестировать кикстартер без ее зависимости от ConsoleIO.
	// представим, что у нас вообще нет класcа ConsoleIO, толоько интерфейс...\
	// я даже удалил :) чтобы небыло соблазна заюзать ConsoleIO. Что делать? Ну работаем как обычно
	public void should_when() {
	    // проинитим их чем можем
		Categories categories = new Categories();
		Projects projects = new Projects();
		IO io = new IO() { // это так называемый анонимный класс. КОгда мы прямо в теле метода реализовываем интерфейс и его методы
			
			@Override
			public int read() {
				return 0;
			}
			
			@Override
			public void print(String message) {
				// do nothing
			}
		};
		Kickstarter kickstarter = new Kickstarter(categories, projects, io); // создадим локальные переменные
		// то, что мы сейчас сделали с кикстартером - мы забили в него DummyObjects - что нибудь лишь бы заработал сам кикстартер
		// если бы мы могли то забили бы туда null - и это тоже можно было бы считать DummyObject.
		// DummyObjects используется тогда, когда нам пофиг, что передать - лишь бы пройти внутреннюю валидацию в методе (конструктроре)
		
		kickstarter.run();
		// тест завис, что не удивительно, поскольку у нас программа с бесконечным циклом. 
		// а сделаем ка в списке категорий возможность выйти из программы, чтобы было как выходить из кода
		// готово, теперь тест должен будет завершиться потому что наш IO всегда возвращает 0, ведет себя как Stub - реализация с 
		// захардкодженными значениями внутри/ 
	}
}
