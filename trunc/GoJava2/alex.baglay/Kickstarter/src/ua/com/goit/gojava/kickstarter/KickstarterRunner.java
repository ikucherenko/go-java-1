package ua.com.goit.gojava.kickstarter;

public class KickstarterRunner {
	// в прошлый раз мы остановились на юзерстори 
	// Как гость я хочу изучить список проектов определенной категории, чтобы понять во что я хочу инвестировать
	// сценарий 1: захожу в приложение -> выбираю любую категорию (например, 1 - спорт) -> вижу список проектов, 
	// каждый из которых содержит: название, краткое описание, сумму необходиму для сбора, сколько собрали уже, сколько дней осталось
	// это уже готово, давай проверим
	
	// следующая история гласит 
	// Как гость я хочу изучить конкретный проект, чтобы понять хочу ли я в него инвестировать
	// сценарий 1: находясь в списке проектов -> вижу запрос на выбор проекта -> выбираю, например 
	// (12 - разработка нового эргономичного мяча для футбола) -> вижу подробное описание проекта, среди которых: 
	// все то же что в списке + история проекта + линк на видео с демо + вопросы/ответы
	
	// задача большая, чтобы сразу ее одним движением решить, а потому я разобью (декомпозирую) ее на составляющие
	// декомпозиция задачи на меньшие составляющие - самый главный навык разработчика. Дробить надо до тех пор, пока не 
	// получишь что-то, что можно будет решить в пару строк (главное, чтобы тебе виделось решение)
	// иногда можно программировать псевдокодом и это очень помагает, я покажу как это делается. Но для начала надо 
	// разделить большую задачу на мелкие:
	// первое отличие чего у меня нет - "находясь в списке проектов -> вижу запрос на выбор проекта "
	// у меня сейчас выбираешь в меню категорию и тебе показывают проекты, и предлагают снова выбрать категорию. Тут надо найти 
	// то место, где это сейчас реализовано. 
	// так, этот main метод давно пора бы вынести в отдельный класс
	public static void main(String[] arguments) {		
		Category category1 = new Category("Photo");
		Category category2 = new Category("Video");
		Category category3 = new Category("Music");
		
		Categories categories = new Categories();
		
		categories.add(category1);
		categories.add(category2);
		categories.add(category3);
		
		Project project1 = new Project("Фильм \"Как выучить java\"", 100000, 15, 
				"http://youtube.com/tg67f347fg",
				"Фильм о том, что учить Java очень даже просто и интересно");
		
		Project project2 = new Project("Фильм \"GoJava\"", 2345, 10,
				"http://youtube.com/fh4iy990", // решил что без этого никак!
				"Фильм о том, как проходит тренинг по Java в GoIT");
	
		project1.setCategory(category2);
		project2.setCategory(category2); 
		
		Projects projects = new Projects();
		projects.add(project1);
		projects.add(project2);
		
		Kickstarter application = new Kickstarter(categories, projects);
		
		// как классно менять объект уже после того как приложение стартовало :) Посмотрим, появится ли результат в детальном описании проекта?
		project1.setHistory("История этого проекта корнями уходит в ....");
		project2.setHistory("Мы только начали и потому особо нечего рассказывать.\n"
				+ "Продолжение следует!");
		
		project1.setQuestionAnswers("Q: какая продолжительность фильма?\n"
				+ "А: два часа");
		// а во втором проекте пока ничего нет
		// и потому там выводится некрасивый null - Фу!
		
		application.run();
	}

}
