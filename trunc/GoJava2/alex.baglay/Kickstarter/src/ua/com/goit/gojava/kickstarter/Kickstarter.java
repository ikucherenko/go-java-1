package ua.com.goit.gojava.kickstarter;

import java.util.Arrays;

public class Kickstarter {

	private Categories categories;

	// получается кикстартер - это композит из категорий, пока только их
	public Kickstarter(Categories categories) {
		this.categories = categories;
	}

	// это наша площадка для экспериментов. 
	public static void main(String[] arguments) {	
		// я вот тут смотрю и думаю, а получилась у нас какая-то конкретная очень категория. 
		// что если их будет 15 ти каждая со своим имененм. Может стоит сделать ее немного более гибкой? 
		
		Category category1 = new Category("Photo");
		Category category2 = new Category("Video");
		Category category3 = new Category("Music");
		
		/* теперь у нас есть три категории и можно обхединять их в группы
		 * создадим себе тут в нашей песочнице группу
		*/
		
		Categories categories = new Categories();
		// хорошо список категорий есть, только теперь вопрос, как мы поместим наши категории вовнутрь? Наверное надо метод Add
		// можно было бы и через конструктор. Но список категорий - это не композит из категорий, а скорее агрегат. Почему? 
		// потому что мы сможем потом захотетьть чуть позже добавить еще одну категорию, после того как уже программа будет запущена
		categories.add(category1);
		categories.add(category2);
		categories.add(category3);
		// теперь все наши категории в группе. Супер! Но там ли они на самом деле или мы только создали видимость добавления?
		// Мы можем попробовать в деле наш список категорий и вывести его на экран
		// что за [Ljava.lang.String;@22509bfc . наверное массив надо напечатать через специальный метод :)
		
		// работает! Значит мы можем теперь пользоваться нашими низкоуровневыми объектами, чтобы сделать пользу в основной программе
		// для этого скопируем эту строку в кикстартер класс и там выполним.
//		System.out.println(Arrays.toString(categories.getCategories()));
		
		// проаинициализируем кикстартер категориями, чтобы иметь возможность наполнять категории до создания кикстартера
		Kickstarter application = new Kickstarter(categories);
		
		application.run();
	}


	private void run() {		
		QuoteGenerator generator = new QuoteGenerator();
		System.out.println(generator.nextQuote());
		
		// хорошо бы выбрать так же кратенькое сообщение, что мы выводим на экран?
		System.out.println();
		System.out.println("Выберите категорию:");
		System.out.println(Arrays.toString(categories.getCategories()));
		
		// пока не плохо. Мы работали долго, потому надо сохраниться... commit
		
		// но тут нет категорий, что делать? Добавить :)
		// Как понять, что надо добавлять как поле, а что как локальная переменная в методе? 
		// поле - это тоже можно сказать локальная переменная, только область видимости ее - весь класс.
		// а локальная переменная метода - живет только в методе. 
		// у нас случился NPE а значит мы забыли проинициализировать поле categories

		// готово, теперь можно приступить ко второй истории...
		// я буду удалять мои замечания от коммита к коммиту, но они будут сохранены в истории
		
		// следующая история:
		// Как гость я хочу видеть список категорий, с тем чтобы сфокусироваться на интересующей меня теме
		// Сценарий: Захожу в приложение -> вижу список категорий и запрос на выбор категории

		// "список категорий" - это первое доменное понятие в задаче под названием кикстартер. Потому я могу смело 
		// создавать класс Categories - что будет инкапсулировать логику работы со списком категорий и содержать все категории в себе
		// чуть позже придумаем как связать его с нашим приложением Kickstarter. Это классика - разработка снизу вверх, 
		// изнутри навне, когда вначале делаем какие-то конкретные штуки, а потом придумываем как их влить в программу
		// начать впринципе можно и еще раньше - создав категорию, а потом уже ее список. Сделаем так. Категория. Это что?
		
	}
}
