package ua.com.goit.gojava.kickstarter;

import java.util.Random;

public class Kickstarter {

	public static void main(String[] arguments) {
		// сейчас нам надо реалоизовать самую приоритетную историю. 
		// с точки зрения клиента я как заказчик хочу, чтобы любой пользователь пришел на наш сайт и
		
		// Как гость (инвестор) я хочу видеть на главной страничке сайта побуждающую к творчеству цитату 
		// чтобы заинтересовать мое внимание
		// Сценарий: захожу в приложение -> вижу цитату
		
		// сделать это не сложно, но нам понадобится класс, который будет точкой входа. Пусть это будет MainApplication
		// в котором мы сейчас находимся
		
		// пишем код так, будь-то бы он уже есть :) Это разработка сверху вниз. Чуть позже мы попробуем другой стиль (снизу вверх)
		// сверху вниз - это от более абстракных частей к деталям, извне вовнутрь, от того что видит клиент к деталям, как 
		// это будет реализовано
		
		Kickstarter application = new Kickstarter();
		// Я наверное переназву этот класс и дам ему более подходящее имя
		
		// на этом все :)
		application.run();
		
	}

	private void run() {
		
		// теперь надо сделать так, чтобы у нас тут все заработало
		// запустим проверим? 
		QuoteGenerator generator = new QuoteGenerator();
		System.out.println(generator.nextQuote());
		
		// спустились чуть глубже и выведем цитатку, как-то так :)

		// в принципе этого уже достаточно, если посмотреть на историю, то там написано, что гость заходит и видит цитату. 
		// это у нас уже готово. Но давайте сделаем так, чтобы цитаты менялись :) Этого вроде как не просили, но мы жеж
		// творческие ребята :) Только перед тем надо сохранить проект, а то мало ли. Для сохранения испольузем 
		// svn
		
		// ладно, пока он качает, продолжим...
		// Если у нас что-то меняется - этор надо инкапсулировать. 
		// теперь надо сделать какой-то массив цитат и бегать по ним случайным образом
		
		// теперь надо научиться менять этот индекс, есть класс Random им и воспользуемся
		
		// следующий шаг - взять и выделить цитатник в отдельный класс. Почему я это делаю сразу? Потому что это отдельная
		// от всех зависимость. Все что будет касаться цитат я буду добавлять в этот новый класс, а что касается другой логики 
		// пока еще буду писать в этом классе. Этот способ - проектирования через рефакторинг. Мы взяли что-то
		// и написали это там, где нам кажется уместным, а потом посмотрели на основные принципы ООП и решили, место ему тут или нет
		// в данном случае следуя SRP + Инкапсуляции я считаю, что то, что должно быть спрятано то прячем.

		// выделяем в класс в три этапа. 1. группируем сходную логику. тут я не включал System.out.println
		// потому как это ВЫВОД, а я выделяю ГЕНЕРАЦИЮ цитат
		// потом надо выделить в отдельный метод
		// теперь можно заинлайнить переменную (избавиться от нее) - те переменные, которые не используются более чем 1 раз
		// лучше inline'ить
		
		// теперь этот метод можем выделить в отдельный класс. Это можно делать вручную, но так больше работы - попросим IDE
		// не получилось :) Эклипс не такой умный как Idea///
		
		// закоммитимся
	}


}
